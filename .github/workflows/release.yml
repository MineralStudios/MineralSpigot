name: Daily Build and Release

on:
  schedule:
    # Run at 11:59 PM UTC every day
    - cron: '59 23 * * *'

jobs:
  build_and_release:
    runs-on: self-hosted

    steps:
    # Step 1: Check out the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up JDK 17 for the build
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    # Step 3: Run Gradle build to produce the JAR files
    - name: Build with Gradle
      run: ./gradlew build

    # Step 4: Check for changes since the last release
    - name: Check for changes since the last release
      id: check_changes
      run: |
        git fetch --tags origin

        # Get the most recent release tag
        LAST_RELEASE_TAG=$(git describe --tags --abbrev=0 --match "v*" 2>/dev/null || echo "")

        if [ -z "$LAST_RELEASE_TAG" ]; then
          echo "No previous releases found, treating this as a new release."
          echo "changes=true" >> $GITHUB_OUTPUT
        else
          # Get the latest commit date after the last release
          LAST_COMMIT_DATE=$(git log -1 --format=%cd --date=short $LAST_RELEASE_TAG..HEAD)
          CURRENT_DATE=$(date +'%Y-%m-%d')

          if [ "$LAST_COMMIT_DATE" != "$CURRENT_DATE" ]; then
            echo "No changes since the last release."
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected since the last release."
            echo "changes=true" >> $GITHUB_OUTPUT
          fi
        fi

    # Step 5: Set the release tag to the current date
    - name: Set the release tag to the current date
      if: steps.check_changes.outputs.changes == 'true'
      id: release_tag
      run: |
        TAG_NAME=$(date +'%Y.%m.%d')
        echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT

    # Step 6: Create a new release if there were changes
    - name: Create a release
      if: steps.check_changes.outputs.changes == 'true'
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.release_tag.outputs.tag }}
        name: Release for ${{ steps.release_tag.outputs.tag }}
        body: "Automated daily release based on changes."
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Step 7: Upload mineralspigot-api JAR to release
    - name: Upload mineralspigot-api JAR to release
      if: steps.check_changes.outputs.changes == 'true'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: MineralSpigot-API/build/libs/mineralspigot-api-*.jar
        asset_name: mineralspigot-api-${{ steps.release_tag.outputs.tag }}.jar
        asset_content_type: application/java-archive

    # Step 8: Upload mineralspigot-server JAR to release
    - name: Upload mineralspigot-server JAR to release
      if: steps.check_changes.outputs.changes == 'true'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: MineralSpigot-Server/build/libs/mineralspigot-server-*.jar
        asset_name: mineralspigot-server-${{ steps.release_tag.outputs.tag }}.jar
        asset_content_type: application/java-archive
